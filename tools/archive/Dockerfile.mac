# Usage
# ================
# docker build . --progress=plain --no-cache
# docker compose up 
# docker build --platform linux/amd64 -t chessbuddy .
# docker run --platform linux/amd64 chessbuddy


# Builder Frontend
FROM node:alpine AS fe-builder
WORKDIR /app

# Install the correct glibc to run Bun
RUN if [[ $(uname -m) == "aarch64" ]] ; \
    then \
    # aarch64
    wget https://raw.githubusercontent.com/squishyu/alpine-pkg-glibc-aarch64-bin/master/glibc-2.26-r1.apk ; \
    apk add --no-cache --allow-untrusted --force-overwrite glibc-2.26-r1.apk ; \
    rm glibc-2.26-r1.apk ; \
    else \
    # x86_64
    wget https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.28-r0/glibc-2.28-r0.apk ; \
    wget -q -O /etc/apk/keys/sgerrand.rsa.pub https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub ; \
    apk add --no-cache --force-overwrite glibc-2.28-r0.apk ; \
    rm glibc-2.28-r0.apk ; \
    fi
RUN npm install -g bun

#FROM node:latest AS fe-builder
WORKDIR /usr/src/app
COPY package.json ./
COPY package-lock.json ./
COPY tsconfig.json ./
RUN bun install
COPY . ./
RUN bun run build

# Builder backend
FROM cgr.dev/chainguard/zig AS be-builder
RUN zig version
WORKDIR /usr/src
# COPY chessbuddy ./
COPY zap /usr/src/zap
WORKDIR /usr/src/zap
RUN echo "$( ls -al /usr/src/chessbuddy )"
RUN zig build chessbuddy
RUN echo "$( ls -al zig-out/bin)"
# RUN strip /usr/src/zig-out/bin/chessbuddy
# CMD ["tail", "-f", "/dev/null"]
# ENTRYPOINT [ "/usr/src/chessbuddy" ]


# Bundle Stage
FROM scratch
# FROM scratch
WORKDIR /usr/bin/
COPY --from=fe-builder /usr/src/app/build ./build
COPY --from=be-builder /usr/src/zap/zig-out/bin/chessbuddy /usr/bin/chessbuddy
# RUN echo "$( ls -al chessbuddy)"
# RUN echo "$( ls -al build)"
# USER 1000
#CMD ["tail", "-f", "/dev/null"]
ENTRYPOINT ["/usr/bin/chessbuddy"]
